{
  "uid" : "72c99dede3de3824",
  "name" : "test_oauthLogin",
  "fullName" : "testcases.test_pond.test_pondUser.TestPondTest#test_oauthLogin",
  "historyId" : "7a1a49b2d1157b4c5b37ab275fc7f73f",
  "time" : {
    "start" : 1676704054472,
    "stop" : 1676704055734,
    "duration" : 1262
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'Please log b...nother option' == 'Login Succes...in Successful'\n  - Login Successful;Login Successful\n  + Please log back into your account using another option;Please log back into your account using another option",
  "statusTrace" : "self = <test_pondUser.TestPondTest object at 0x7fbf6a34be80>\nlogin_yh = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_oauthLogin(self, login_yh):\n        # dataObj = login_yh[\"body\"][\"data\"][\"dataObject\"]\n        # sId = dataObj[\"sId\"]\n        # id = login_yh[\"body\"][\"userId\"]\n        # token = dataObj[\"token\"]\n        # api = yml['oauthLoginApi']\n        # header = FrogHeader.get_header()\n        # # 添加header数据\n        # header[\"sid\"] = sId\n        # header[\"userId\"] = \"{}\".format(id)\n        # header[\"token\"] = token\n        header = login_yh\n        print(\"header:{}\".format(header))\n        url = frog[\"host\"] + yml['oauthLoginApi']\n        logger.info(\"一键登录接口\")\n        res = frog_req.post(url, headers=header)\n        logger.info(\"res:{}\".format(res))\n        assert res['code'] == 200\n        msg = res[\"body\"][\"state\"][\"msg\"]\n>       assert msg == \"Login Successful;Login Successful\"\nE       AssertionError: assert 'Please log b...nother option' == 'Login Succes...in Successful'\nE         - Login Successful;Login Successful\nE         + Please log back into your account using another option;Please log back into your account using another option\n\ntestcases/test_pond/test_pondUser.py:148: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1676703614227,
      "stop" : 1676703614342,
      "duration" : 115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login_yh",
    "time" : {
      "start" : 1676704047068,
      "stop" : 1676704050575,
      "duration" : 3507
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'Please log b...nother option' == 'Login Succes...in Successful'\n  - Login Successful;Login Successful\n  + Please log back into your account using another option;Please log back into your account using another option",
    "statusTrace" : "self = <test_pondUser.TestPondTest object at 0x7fbf6a34be80>\nlogin_yh = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_oauthLogin(self, login_yh):\n        # dataObj = login_yh[\"body\"][\"data\"][\"dataObject\"]\n        # sId = dataObj[\"sId\"]\n        # id = login_yh[\"body\"][\"userId\"]\n        # token = dataObj[\"token\"]\n        # api = yml['oauthLoginApi']\n        # header = FrogHeader.get_header()\n        # # 添加header数据\n        # header[\"sid\"] = sId\n        # header[\"userId\"] = \"{}\".format(id)\n        # header[\"token\"] = token\n        header = login_yh\n        print(\"header:{}\".format(header))\n        url = frog[\"host\"] + yml['oauthLoginApi']\n        logger.info(\"一键登录接口\")\n        res = frog_req.post(url, headers=header)\n        logger.info(\"res:{}\".format(res))\n        assert res['code'] == 200\n        msg = res[\"body\"][\"state\"][\"msg\"]\n>       assert msg == \"Login Successful;Login Successful\"\nE       AssertionError: assert 'Please log b...nother option' == 'Login Succes...in Successful'\nE         - Login Successful;Login Successful\nE         + Please log back into your account using another option;Please log back into your account using another option\n\ntestcases/test_pond/test_pondUser.py:148: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "93bb7b4a642030aa",
      "name" : "log",
      "source" : "93bb7b4a642030aa.txt",
      "type" : "text/plain",
      "size" : 714
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.test_pond"
  }, {
    "name" : "suite",
    "value" : "test_pondUser"
  }, {
    "name" : "subSuite",
    "value" : "TestPondTest"
  }, {
    "name" : "host",
    "value" : "voryndeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "34442-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_pond.test_pondUser"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "638f8df67ff280b9",
        "reportUrl" : "http://localhost:8080/job/aaa/16/allure/#testresult/638f8df67ff280b9",
        "status" : "passed",
        "time" : {
          "start" : 1676702934465,
          "stop" : 1676702935737,
          "duration" : 1272
        }
      }, {
        "uid" : "21c44d15da5bb34",
        "reportUrl" : "http://localhost:8080/job/aaa/15/allure/#testresult/21c44d15da5bb34",
        "status" : "passed",
        "time" : {
          "start" : 1676701896230,
          "stop" : 1676701898329,
          "duration" : 2099
        }
      }, {
        "uid" : "27a251def85a4edd",
        "reportUrl" : "http://localhost:8080/job/aaa/14/allure/#testresult/27a251def85a4edd",
        "status" : "passed",
        "time" : {
          "start" : 1676701229754,
          "stop" : 1676701231081,
          "duration" : 1327
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "72c99dede3de3824.json",
  "parameterValues" : [ ]
}