{
  "uid" : "b762f1f74eb6616d",
  "name" : "test_getGroupVideoInfo",
  "fullName" : "testcases.test_camera.test_groupVideo.TestGroupVideo#test_getGroupVideoInfo",
  "historyId" : "26b0ac82682a25a9cbcc7c9f9944cb47",
  "time" : {
    "start" : 1676703636369,
    "stop" : 1676703649827,
    "duration" : 13458
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'videoId'",
  "statusTrace" : "self = <test_groupVideo.TestGroupVideo object at 0x7fbf6a2d40d0>\nlogin_fb = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_getGroupVideoInfo(self, login_fb):\n        # dataObj = login_fb[\"body\"][\"data\"][\"dataObject\"]\n        # sId = dataObj[\"sId\"]\n        # id = login_fb[\"body\"][\"userId\"]\n        # token = dataObj[\"token\"]\n        # header = FrogHeader.get_header()\n        # # 添加header数据\n        # header[\"sid\"] = sId\n        # header[\"userId\"] = \"{}\".format(id)\n        # header[\"token\"] = token\n        header = login_fb\n        id = int(header['userId'])\n        print(\"header:{}\".format(header))\n        count_sql = \"select count(production_id) from video_multiple_sub_rec where user_id = {};\".format(id)\n        count_data = con.select(count_sql, one=True)\n        count_num = count_data[0]\n        sql = \"select production_id from video_multiple_sub_rec where user_id = {};\".format(id)# 通过userid查询该用户下的合拍视频id\n        db_data = con.select(sql)\n        data = {\"proId\": db_data[random.randint(0, count_num-1)][0]}\n        url = frog[\"host\"] + yml['getGroupVideoInfoApi']\n        logger.info(\"获取单个合拍任务信息接口\")\n        res = frog_req.post(url, headers=header, json=data)\n        logger.info(\"getGroupVideoInfo:{}\".format(res))\n        assert res['code'] == 200\n        assert res['body']['state']['code'] == 0\n        assert res['body']['userId'] == id\n        multipleInfoList = res['body']['data']['multipleInfoList']  # multipleInfoList返回合拍中单个视频信息，双人合拍list长度为2，四人合拍为4\n        assert len(multipleInfoList) > 0\n        rom = random.randint(0, len(multipleInfoList)-1)\n        sql1 = \"select video_id, user_id from video_multiple_sub_rec where production_id = {} and video_sn = {};\".format(\n            res['body']['data']['proId'], rom)\n        data1 = con.select(sql1, one=True)\n        print(data1)\n>       assert data1[0] == multipleInfoList[rom]['videoId']\nE       KeyError: 'videoId'\n\ntestcases/test_camera/test_groupVideo.py:117: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1676703614227,
      "stop" : 1676703614342,
      "duration" : 115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login_fb",
    "time" : {
      "start" : 1676703614342,
      "stop" : 1676703617393,
      "duration" : 3051
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'videoId'",
    "statusTrace" : "self = <test_groupVideo.TestGroupVideo object at 0x7fbf6a2d40d0>\nlogin_fb = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_getGroupVideoInfo(self, login_fb):\n        # dataObj = login_fb[\"body\"][\"data\"][\"dataObject\"]\n        # sId = dataObj[\"sId\"]\n        # id = login_fb[\"body\"][\"userId\"]\n        # token = dataObj[\"token\"]\n        # header = FrogHeader.get_header()\n        # # 添加header数据\n        # header[\"sid\"] = sId\n        # header[\"userId\"] = \"{}\".format(id)\n        # header[\"token\"] = token\n        header = login_fb\n        id = int(header['userId'])\n        print(\"header:{}\".format(header))\n        count_sql = \"select count(production_id) from video_multiple_sub_rec where user_id = {};\".format(id)\n        count_data = con.select(count_sql, one=True)\n        count_num = count_data[0]\n        sql = \"select production_id from video_multiple_sub_rec where user_id = {};\".format(id)# 通过userid查询该用户下的合拍视频id\n        db_data = con.select(sql)\n        data = {\"proId\": db_data[random.randint(0, count_num-1)][0]}\n        url = frog[\"host\"] + yml['getGroupVideoInfoApi']\n        logger.info(\"获取单个合拍任务信息接口\")\n        res = frog_req.post(url, headers=header, json=data)\n        logger.info(\"getGroupVideoInfo:{}\".format(res))\n        assert res['code'] == 200\n        assert res['body']['state']['code'] == 0\n        assert res['body']['userId'] == id\n        multipleInfoList = res['body']['data']['multipleInfoList']  # multipleInfoList返回合拍中单个视频信息，双人合拍list长度为2，四人合拍为4\n        assert len(multipleInfoList) > 0\n        rom = random.randint(0, len(multipleInfoList)-1)\n        sql1 = \"select video_id, user_id from video_multiple_sub_rec where production_id = {} and video_sn = {};\".format(\n            res['body']['data']['proId'], rom)\n        data1 = con.select(sql1, one=True)\n        print(data1)\n>       assert data1[0] == multipleInfoList[rom]['videoId']\nE       KeyError: 'videoId'\n\ntestcases/test_camera/test_groupVideo.py:117: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f83025d845d5a630",
      "name" : "log",
      "source" : "f83025d845d5a630.txt",
      "type" : "text/plain",
      "size" : 15377
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.test_camera"
  }, {
    "name" : "suite",
    "value" : "test_groupVideo"
  }, {
    "name" : "subSuite",
    "value" : "TestGroupVideo"
  }, {
    "name" : "host",
    "value" : "voryndeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "34442-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_camera.test_groupVideo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "1f65c3cb2b5a4dbf",
        "reportUrl" : "http://localhost:8080/job/aaa/17/allure/#testresult/1f65c3cb2b5a4dbf",
        "status" : "passed",
        "time" : {
          "start" : 1676703577089,
          "stop" : 1676703590785,
          "duration" : 13696
        }
      }, {
        "uid" : "eab62e9e7f945380",
        "reportUrl" : "http://localhost:8080/job/aaa/16/allure/#testresult/eab62e9e7f945380",
        "status" : "passed",
        "time" : {
          "start" : 1676702510176,
          "stop" : 1676702521897,
          "duration" : 11721
        }
      }, {
        "uid" : "f430172076b1a52a",
        "reportUrl" : "http://localhost:8080/job/aaa/15/allure/#testresult/f430172076b1a52a",
        "status" : "passed",
        "time" : {
          "start" : 1676701491341,
          "stop" : 1676701504460,
          "duration" : 13119
        }
      }, {
        "uid" : "4bc43aaf3f44b4c5",
        "reportUrl" : "http://localhost:8080/job/aaa/14/allure/#testresult/4bc43aaf3f44b4c5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'videoId'",
        "time" : {
          "start" : 1676700792324,
          "stop" : 1676700805016,
          "duration" : 12692
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b762f1f74eb6616d.json",
  "parameterValues" : [ ]
}