{
  "uid" : "f68cb2979375673f",
  "name" : "test_getUserNominatedList",
  "fullName" : "testcases.test_pond.test_pondNominated.TestPondNominated#test_getUserNominatedList",
  "historyId" : "31e9711fc0b5ac048c938c176a40b56b",
  "time" : {
    "start" : 1676704032305,
    "stop" : 1676704033923,
    "duration" : 1618
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'sponsorUserId'",
  "statusTrace" : "self = <test_pondNominated.TestPondNominated object at 0x7fbf6a374cd0>\nlogin_fb = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_getUserNominatedList(self, login_fb):  # 获取pond nominated列表接口\n        header = login_fb\n        print(\"header:{}\".format(header))\n        url = frog[\"host\"] + yml['getUserNominatedListApi']\n        logger.info(\"pond nominated列表接口\")\n        res = frog_req.post(url, headers=header)\n        logger.info(\"PondNominatedList:{}\".format(res))\n        assert res['code'] == 200\n        nominatedList = res['body']['data']['findRespVoList']\n        assert len(nominatedList) > 0\n        sponsor_userid = None\n        for sponsor in nominatedList:\n>           if sponsor['sponsorUserId'] == 62867000:\nE           KeyError: 'sponsorUserId'\n\ntestcases/test_pond/test_pondNominated.py:42: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1676703614227,
      "stop" : 1676703614342,
      "duration" : 115
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "login_fb",
    "time" : {
      "start" : 1676704029288,
      "stop" : 1676704032305,
      "duration" : 3017
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'sponsorUserId'",
    "statusTrace" : "self = <test_pondNominated.TestPondNominated object at 0x7fbf6a374cd0>\nlogin_fb = {'caller': 'app', 'content-type': 'application/json', 'encrypt': 'md5', 'etag': 'qqq', ...}\n\n    def test_getUserNominatedList(self, login_fb):  # 获取pond nominated列表接口\n        header = login_fb\n        print(\"header:{}\".format(header))\n        url = frog[\"host\"] + yml['getUserNominatedListApi']\n        logger.info(\"pond nominated列表接口\")\n        res = frog_req.post(url, headers=header)\n        logger.info(\"PondNominatedList:{}\".format(res))\n        assert res['code'] == 200\n        nominatedList = res['body']['data']['findRespVoList']\n        assert len(nominatedList) > 0\n        sponsor_userid = None\n        for sponsor in nominatedList:\n>           if sponsor['sponsorUserId'] == 62867000:\nE           KeyError: 'sponsorUserId'\n\ntestcases/test_pond/test_pondNominated.py:42: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c2fa193cde1fdad6",
      "name" : "log",
      "source" : "c2fa193cde1fdad6.txt",
      "type" : "text/plain",
      "size" : 5349
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.test_pond"
  }, {
    "name" : "suite",
    "value" : "test_pondNominated"
  }, {
    "name" : "subSuite",
    "value" : "TestPondNominated"
  }, {
    "name" : "host",
    "value" : "voryndeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "34442-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_pond.test_pondNominated"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "35bc83e43fe3ccaf",
        "reportUrl" : "http://localhost:8080/job/aaa/16/allure/#testresult/35bc83e43fe3ccaf",
        "status" : "broken",
        "statusDetails" : "KeyError: 'sponsorUserId'",
        "time" : {
          "start" : 1676702910589,
          "stop" : 1676702913521,
          "duration" : 2932
        }
      }, {
        "uid" : "4870d084ecbced2c",
        "reportUrl" : "http://localhost:8080/job/aaa/15/allure/#testresult/4870d084ecbced2c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'sponsorUserId'",
        "time" : {
          "start" : 1676701874779,
          "stop" : 1676701876121,
          "duration" : 1342
        }
      }, {
        "uid" : "b31272558159d85f",
        "reportUrl" : "http://localhost:8080/job/aaa/14/allure/#testresult/b31272558159d85f",
        "status" : "broken",
        "statusDetails" : "KeyError: 'sponsorUserId'",
        "time" : {
          "start" : 1676701195686,
          "stop" : 1676701196957,
          "duration" : 1271
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f68cb2979375673f.json",
  "parameterValues" : [ ]
}